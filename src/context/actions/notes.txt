With action types, create action creators and reducers

// User Context and Handling LOGIN_USER type 

// userActions.ts

// Import the action types
import {
  LOGIN_USER,
  LOGIN_USER_LOADING,
  LOGIN_USER_SUCCESS,
  LOGIN_USER_ERROR,
} from './actionTypes';

// Action creator for logging in a user
export const loginUser = (username: string, password: string) => async (dispatch: Dispatch) => {
  dispatch({ type: LOGIN_USER_LOADING });

  try {
    // Perform the API call to log in the user
    const response = await api.post('/login', { username, password });

    // If login is successful, dispatch the success action
    dispatch({ type: LOGIN_USER_SUCCESS, payload: { user: response.data } });
  } catch (error) {
    // If there's an error during login, dispatch the error action
    dispatch({ type: LOGIN_USER_ERROR, payload: { error: 'Invalid username or password' } });
  }
};

// userReducer.ts

// Define the UserState interface
interface UserState {
  user: UserData | null;
  loading: boolean;
  error: string | null;
}

// Define the UserAction type
type UserAction =
  | { type: typeof LOGIN_USER_LOADING }
  | { type: typeof LOGIN_USER_SUCCESS; payload: { user: UserData } }
  | { type: typeof LOGIN_USER_ERROR; payload: { error: string } };

// Initial state for the user context
const initialState: UserState = {
  user: null,
  loading: false,
  error: null,
};

// Reducer function for handling user actions
const userReducer = (state: UserState = initialState, action: UserAction): UserState => {
  switch (action.type) {
    case LOGIN_USER_LOADING:
      return {
        ...state,
        loading: true,
        error: null,
      };
    case LOGIN_USER_SUCCESS:
      return {
        ...state,
        user: action.payload.user,
        loading: false,
        error: null,
      };
    case LOGIN_USER_ERROR:
      return {
        ...state,
        loading: false,
        error: action.payload.error,
      };
    // Handle other user-related action types here if needed
    default:
      return state;
  }
};

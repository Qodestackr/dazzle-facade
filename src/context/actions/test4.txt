// adminActions.ts

// Import the action types
import {
  DELETE_USER,
  DELETE_USER_LOADING,
  DELETE_USER_SUCCESS,
  DELETE_USER_ERROR,
} from './actionTypes';

// Action creator for deleting a user
export const deleteUser = (userId: string) => async (dispatch: Dispatch) => {
  dispatch({ type: DELETE_USER_LOADING });

  try {
    // Perform the API call to delete the user
    await api.delete(`/users/${userId}`);

    // If the deletion is successful, dispatch the success action
    dispatch({ type: DELETE_USER_SUCCESS, payload: { userId } });
  } catch (error) {
    // If there's an error during deletion, dispatch the error action
    dispatch({ type: DELETE_USER_ERROR, payload: { error } });
  }
};

// adminReducer.ts

// Reducer function for handling admin actions
const adminReducer = (state: AdminState, action: AdminAction): AdminState => {
  switch (action.type) {
    case DELETE_USER_LOADING:
      return {
        ...state,
        loading: true,
        error: null,
      };
    case DELETE_USER_SUCCESS:
      return {
        ...state,
        loading: false,
        error: null,
        // Update the state to remove the deleted user from the users list
        users: state.users.filter((user) => user.id !== action.payload.userId),
      };
    case DELETE_USER_ERROR:
      return {
        ...state,
        loading: false,
        error: action.payload.error,
      };
    // Handle other admin-related action types here if needed
    default:
      return state;
  }
};
